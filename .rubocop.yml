---
AllCops:
  TargetRubyVersion: 2.1
  Exclude:
    - '**/*.erb'
    - 'spec/**/*'
    - 'vendor/**/*'
    - 'examples/**/*'

Lint/ConditionPosition:
  Enabled: true

Lint/ElseLayout:
  Enabled: true

Lint/UnreachableCode:
  Enabled: true

Lint/UselessComparison:
  Enabled: true

# MAYBE useful - no return inside ensure block.
Lint/EnsureReturn:
  Enabled: true

# MAYBE useful - errors when rescue {} happens.
Lint/HandleExceptions:
  Enabled: false

# MAYBE useful - catches while 1
Lint/LiteralInCondition:
  Enabled: false

Lint/ShadowingOuterLocalVariable:
  Enabled: true

# Can catch complicated strings.
Lint/LiteralInInterpolation:
  Enabled: true

Style/MultilineMethodCallIndentation:
  EnforcedStyle: indented
  IndentationWidth: 2

# DISABLED really useless. Detects return as last statement.
Style/RedundantReturn:
  Enabled: false

# DISABLED since the instances do not seem to indicate any specific errors.
Lint/AmbiguousOperator:
  Enabled: false

# DISABLED since for all the checked, we are basically checking nil
# TODO: Change the checking so that if the variable being assigned to has
# a value ALREADY, then raise an error.
Lint/AssignmentInCondition:
  Enabled: false

# DISABLED - not useful
Style/SpaceBeforeComment:
  Enabled: false

# DISABLED - not useful
Style/HashSyntax:
  Enabled: false

# USES: as shortcut for non nil&valid checking a = x() and a.empty?
# DISABLED - not useful
Style/AndOr:
  Enabled: false

# DISABLED - not useful
Style/RedundantSelf:
  Enabled: false

# DISABLED - not useful
Metrics/MethodLength:
  Enabled: false

# DISABLED - not useful
Style/WhileUntilModifier:
  Enabled: false

# DISABLED - the offender is just haskell envy
Lint/AmbiguousRegexpLiteral:
  Enabled: false

# DISABLED
Security/Eval:
  Enabled: false
# DISABLED
Lint/BlockAlignment:
  Enabled: false

# DISABLED
Lint/DefEndAlignment:
  Enabled: false

# DISABLED
Lint/EndAlignment:
  Enabled: false

# DISABLED
Lint/DeprecatedClassMethods:
  Enabled: false

# DISABLED
Lint/Loop:
  Enabled: false

# DISABLED
Lint/ParenthesesAsGroupedExpression:
  Enabled: false

Lint/RescueException:
  Enabled: false

Lint/StringConversionInInterpolation:
  Enabled: false

Lint/UnusedBlockArgument:
  Enabled: false

Lint/UnusedMethodArgument:
  Enabled: false

# DISABLED - TODO
Lint/UselessAccessModifier:
  Enabled: false

# DISABLED - TODO
Lint/UselessAssignment:
  Enabled: false

# DISABLED - TODO
Lint/Void:
  Enabled: false

Style/AccessModifierIndentation:
  Enabled: false

Style/AccessorMethodName:
  Enabled: false

Style/Alias:
  Enabled: false

Style/AlignArray:
  Enabled: false

Style/AlignHash:
  Enabled: false

Style/AlignParameters:
  Enabled: false

Metrics/BlockNesting:
  Enabled: false

Style/AsciiComments:
  Enabled: false

Style/Attr:
  Enabled: false

Style/BracesAroundHashParameters:
  Enabled: false

Style/CaseEquality:
  Enabled: false

Style/CaseIndentation:
  Enabled: false

Style/CharacterLiteral:
  Enabled: false

Style/ClassAndModuleCamelCase:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

Style/ClassCheck:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Style/ClassMethods:
  Enabled: false

Style/ClassVars:
  Enabled: false

Style/WhenThen:
  Enabled: false

# DISABLED - not useful
Style/WordArray:
  Enabled: false

Style/UnneededPercentQ:
  Enabled: false

Style/Tab:
  Enabled: false

Style/SpaceBeforeSemicolon:
  Enabled: true

Style/TrailingBlankLines:
  Enabled: false

Style/SpaceInsideBlockBraces:
  Enabled: true

Style/SpaceInsideBrackets:
  Enabled: true

Style/SpaceInsideHashLiteralBraces:
  Enabled: true

Style/SpaceInsideParens:
  Enabled: true

Style/LeadingCommentSpace:
  Enabled: false

Style/SpaceBeforeFirstArg:
  Enabled: true

Style/SpaceAfterColon:
  Enabled: true

Style/SpaceAfterComma:
  Enabled: true

Style/SpaceAroundKeyword:
  Enabled: true

Style/SpaceAfterMethodName:
  Enabled: true

Style/SpaceAfterNot:
  Enabled: true

Style/SpaceAfterSemicolon:
  Enabled: true

Style/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Style/SpaceAroundOperators:
  Enabled: true

Style/SpaceBeforeBlockBraces:
  Enabled: true

Style/SpaceBeforeComma:
  Enabled: true

Style/CollectionMethods:
  Enabled: false

Style/CommentIndentation:
  Enabled: false

Style/ColonMethodCall:
  Enabled: false

Style/CommentAnnotation:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Style/ConstantName:
  Enabled: false

Style/Documentation:
  Enabled: false

Style/DefWithParentheses:
  Enabled: false

Style/DotPosition:
  Enabled: false

# DISABLED - used for converting to bool
Style/DoubleNegation:
  Enabled: false

Style/EachWithObject:
  Enabled: false

Style/EmptyLineBetweenDefs:
  Enabled: false

Style/IndentArray:
  Enabled: false

Style/IndentHash:
  Enabled: false

Style/IndentationConsistency:
  Enabled: true

Style/IndentationWidth:
  Enabled: true

Style/EmptyLines:
  Enabled: false

Style/EmptyLinesAroundAccessModifier:
  Enabled: false

Style/EmptyLiteral:
  Enabled: false

Metrics/LineLength:
  Enabled: false

Style/MethodCallWithoutArgsParentheses:
  Enabled: true

Style/MethodDefParentheses:
  Enabled: true

Style/LineEndConcatenation:
  Enabled: false

Style/TrailingWhitespace:
  Enabled: true

Style/StringLiterals:
  Enabled: false

Style/TrailingCommaInLiteral:
  Enabled: false

Style/TrailingCommaInArguments:
  Enabled: false

Style/GlobalVars:
  Enabled: false

Style/GuardClause:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

Style/MultilineIfThen:
  Enabled: true

Style/NegatedIf:
  Enabled: true

Style/NegatedWhile:
  Enabled: true

Style/Next:
  Enabled: false

Style/SingleLineBlockParams:
  Enabled: false

Style/SingleLineMethods:
  Enabled: false

Style/SpecialGlobalVars:
  Enabled: false

Style/TrivialAccessors:
  Enabled: false

Style/UnlessElse:
  Enabled: true

Style/VariableInterpolation:
  Enabled: true

Style/VariableName:
  Enabled: true

Style/WhileUntilDo:
  Enabled: true

Style/EvenOdd:
  Enabled: true

Style/For:
  Enabled: true

Style/Lambda:
  Enabled: false

Style/MethodName:
  Enabled: false

Style/MultilineTernaryOperator:
  Enabled: true

Style/NestedTernaryOperator:
  Enabled: true

Style/NilComparison:
  Enabled: true

Style/FormatString:
  Enabled: true

Style/MultilineBlockChain:
  Enabled: true

Style/Semicolon:
  Enabled: true

Style/SignalException:
  Enabled: false

Style/NonNilCheck:
  Enabled: true

Style/Not:
  Enabled: true

Style/NumericLiterals:
  Enabled: true

Style/OneLineConditional:
  Enabled: true

Style/OpMethod:
  Enabled: true

Style/ParenthesesAroundCondition:
  Enabled: true

Style/PercentLiteralDelimiters:
  Enabled: true

Style/PerlBackrefs:
  Enabled: false

Style/PredicateName:
  Enabled: false

Style/RedundantException:
  Enabled: true

Style/SelfAssignment:
  Enabled: true

Style/Proc:
  Enabled: true

Style/RaiseArgs:
  Enabled: true

Style/RedundantBegin:
  Enabled: true

Style/RescueModifier:
  Enabled: true

Style/RegexpLiteral:
  Enabled: false

Lint/UnderscorePrefixedVariableName:
  Enabled: true

Metrics/ParameterLists:
  Enabled: true

Lint/RequireParentheses:
  Enabled: true

Style/ModuleFunction:
  Enabled: false

Lint/Debugger:
  Enabled: false

Style/IfWithSemicolon:
  Enabled: true

Style/Encoding:
  Enabled: false

# We have 4 violations here currently. Fixes these will take a bit of work,
# so once RE-5565 is resolved, this should be enabled.
Metrics/PerceivedComplexity:
  Enabled: true

Style/CommandLiteral:
  EnforcedStyle: percent_x

# We have a few modules that are much larger than the default limit even when
# we don't count the comments. This isn't worth it to keep enabled.
Metrics/ModuleLength:
  Enabled: false

# I have no idea why, but it's complaining that we aren't using octal notation
# correctly when specifying file permissions. I have no idea how to resolve the
# complaint without disabling this cop. File permissions are not defined with
# octal notation. The complaint makes no sense.
Style/NumericLiteralPrefix:
  Enabled: false

Style/ConditionalAssignment:
  Enabled: false
