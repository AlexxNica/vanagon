<% dirnames = get_directories.map {|d| d.path } %>
export SHELL := $(shell which bash)

tempdir := $(shell mktemp -d -p /var/tmp 2>/dev/null || mktemp -d -t 'tmp')
workdir := $(PWD)

all: <%= package_name %>

<%= package_name %>: <%= @name %>-<%= @version %>.tar.gz
	<%= generate_package.join("\n\t") %>

file-list-before-build:
<%- if dirnames.empty? -%>
	touch file-list-before-build
<%- else -%>
	(find -L <%= dirnames.join(' ') %> 2>/dev/null || find <%= dirnames.join(' ') %> -follow) | sort | uniq > file-list-before-build
<%- end -%>

file-list-after-build: <%= @components.map {|comp| comp.name }.join(" ") %>
<%- if dirnames.empty? -%>
	touch file-list-after-build
<%- else -%>
	(find -L <%= dirnames.join(' ') %>  2>/dev/null || find <%= dirnames.join(' ') %> -follow) | sort | uniq > file-list-after-build
<%- end -%>

<%= @name %>-<%= @version %>.tar.gz: file-list <%= @cleanup ? 'cleanup-components' : '' %>
	<%= pack_tarball_command %>

file-list: <%= dirnames.join(' ') %> <%= @name %>-project <%= @version_file ? @version_file.path : '' %>
	comm -23 file-list-after-build file-list-before-build > file-list
	comm -23 file-list-after-build file-list-before-build | sed -e 's/\(^.*[[:space:]].*$$\)/"\1"/g' > file-list-for-rpm

<%- if @version_file -%>
<%= @version_file.path %>:
	echo <%= @version %> > '<%= @version_file.path %>'
<%- end -%>

<%- dirnames.each do |dir| -%>
<%= dir %>:
	mkdir -p <%= dir %>
<%- end %>

<%- if @cleanup -%>
cleanup-components: <%= @components.map {|comp| "#{comp.name}-cleanup" }.join(" ") %>
	touch cleanup-components
<%- end -%>

<%= @name %>-project: file-list-after-build
	touch <%= @name %>-project

<%- @components.each do |comp| -%>
<%= comp.name %>: <%= comp.name %>-install

<%- if @cleanup -%>
<%= comp.name %>-cleanup: <%= comp.name %>-install
	<%= comp.cleanup_source %>
	touch <%= comp.name %>-cleanup
<%- end -%>

<%= comp.name %>-unpack: file-list-before-build
	<%= comp.extract_with %>
	touch <%= comp.name %>-unpack

<%= comp.name %>-patch: <%= comp.name %>-unpack
	<%- unless comp.patches.empty? -%>
		cd <%= comp.dirname %> && \
		<%- comp.patches.each do |patch| -%>
			<%= @platform.patch %> --strip=<%= patch.strip %> --fuzz=<%= patch.fuzz %> --ignore-whitespace < ../patches/<%= File.basename(patch.path) %> && \
		<%- end -%>
		:
	<%- end -%>
	
	touch <%= comp.name %>-patch

<%= comp.name %>-configure: <%= comp.name %>-patch <%= list_component_dependencies(comp).join(" ") %>
	<%- unless comp.configure.empty? -%>
	cd <%= comp.dirname %> && \
	<%= comp.get_environment %> && \
	<%= comp.configure.join(" && \\\n\t") %>
	<%- end -%>
	touch <%= comp.name %>-configure

<%= comp.name %>-build: <%= comp.name %>-configure
	<%- unless comp.build.empty? -%>
	cd <%= comp.dirname %> && \
	<%= comp.get_environment %> && \
	<%= comp.build.join(" && \\\n\t") %>
	<%- end -%>
	touch <%= comp.name %>-build

<%= comp.name %>-install: <%= comp.name %>-build
	<%- unless comp.install.empty? -%>
	cd <%= comp.dirname %> && \
	<%= comp.get_environment %> && \
	<%= comp.install.join(" && \\\n\t") %>
	<%- end -%>
	touch <%= comp.name %>-install

<%= comp.name %>-clean:
	[ -d <%= comp.dirname %> ] && cd <%= comp.dirname %> && \
	<%= @platform[:make] %> clean
	<%- ["configure", "build", "install"].each do |type| -%>
	[ -e <%= comp.name %>-<%= type %> ] && rm <%= comp.name %>-<%= type %>
	<%- end -%>

<%= comp.name %>-clobber: <%= comp.name %>-clean
	[ -d <%= comp.dirname %> ] && rm -r <%= comp.dirname %>
	[ -e <%= comp.name %>-unpack ] && rm <%= comp.name %>-unpack

<%- end -%>

clean: <%= @components.map {|comp| "#{comp.name}-clean" }.join(" ") %>

clobber: <%= @components.map {|comp| "#{comp.name}-clobber" }.join(" ") %>

.PHONY: clean clobber  <%= @components.map {|comp| "#{comp.name}-clean #{comp.name}-clobber" }.join(" ") %>
